'''
SOFTWARE DEVELOPMENT PROJECT
Client Update Utility - GUI MODULE

Made By: Will 12SDA
Started on 15/07/2020

This code contains the code required for all pages of
the GUI and its functionality

This uses:


'''


from tkinter import *
from tkinter import ttk
import tkinter as tk
from tkinter import simpledialog
from tkinter import messagebox

#-----------------------------------------------------------------------------------------------

#Variables to keep track of the windows position on the screen
winX = 100
winY = 100

#Other required global variables
tickbox_Y = 0
btnList = []
clientList = [] #Create a list where clients will be added
mainFrame = 0
isFirstLoad = True
switchStatus = False
pauseStatus = False
strPauseStatus = ""
        

#Function to clear a GUI page
def clearPage(window):
    global winX, winY
    winX = window.winfo_x() #Save the x and y position of the window
    winY = window.winfo_y()
    window.destroy()


#Function to setup basic root window
def setupWindow(window):
    #Configure Root Window and preserve its previous position
    window.geometry("800x670+"+str(winX)+"+"+str(winY)) #Width x Height + PosX + PosY
    window.configure(bg = "#333333")
    window.title("v1.0") #Display software version number
    #window.wm_iconbitmap('images/icon.ico') #Add software icon
    window.resizable(width=False, height=False) #Stop user from being able to resize the window


#Function to clear a txt file
def deleteContent(pfile):
    pfile.seek(0)
    pfile.truncate()


#-----------------------------------------------------------------------------------------------


#A function is used to set up each GUI page so that buttons can cycle between pages. This is page 1, the main page
def Setup_GUI_Page1():
    root = Tk()

    setupWindow(root) #Draw basic window

    #Configure Static Text Labels
    title = Label(root, text="Client Update Utility",bg="#333333",fg="White",font=("Helvetica", 18, 'bold'))
    title.place(x=450,y=30)

    statusLabel = Label(root, text="Most Recent Update:",bg="#333333",fg="White",font=("Helvetica", 12))
    statusLabel.place(x=490, y=100)

    timeLabel = Label(root, text="Last Updated:",bg="#333333",fg="White",font=("Helvetica", 12))
    timeLabel.place(x=490, y=150)

    uploadDataTitle = Label(root, text="Upload New Update Data:",bg="#333333",fg="White",font=("Helvetica", 13, 'bold'))
    uploadDataTitle.place(x=370,y=440)

    autoUpdatesLabel = Label(root, text="Auttomatic File Uploads:",bg="#333333",fg="#999999",font=("Helvetica", 11))
    autoUpdatesLabel.place(x=410,y=550)

    logFilterLabel = Label(root, text="Filter Log By:",bg="#333333",fg="White",font=("Helvetica", 12, 'bold'))
    logFilterLabel.place(x=10, y=550)

    logExportLabel = Label(root, text="Export Update Log:",bg="#333333",fg="White",font=("Helvetica", 12, 'bold'))
    logExportLabel.place(x=10, y=610)



    #Configure Variable or code-accessible strings
    strUpdateStatus = tk.StringVar()
    strUpdateStatus.set("SUCCESS")
    statusContent = Label(root, textvariable=strUpdateStatus,bg="#333333",fg="#00ff00",font=("Helvetica", 12, 'bold'))
    statusContent.place(x=643, y=100)

    strTimestamp = tk.StringVar()
    strTimestamp.set("12/06/2020 16:42")
    timestamp = Label(root, textvariable=strTimestamp,bg="#333333",fg="#5e99ff",font=("Helvetica", 12))
    timestamp.place(x=601, y=150)

    strLastUpload = tk.StringVar()
    strLastUpload.set("Last upload: 0 Days ago")
    lastUploadLabel = Label(root, textvariable=strLastUpload,bg="#333333",fg="#999999",font=("Helvetica", 10))
    lastUploadLabel.place(x=480,y=619)

    strPauseStatus = tk.StringVar()
    strPauseStatus.set("Running...")
    PauseButtonLabel = Label(root, textvariable=strPauseStatus,bg="#333333",fg="#999999",font=("Helvetica", 10))
    PauseButtonLabel.place(x=385,y=180)



    #Configure updatte log and scrollbar functionality
    logCanvas = Canvas(root,width=350,height=500) #Canvas for output log
    logCanvas.place(x=10,y=10)

    scrollbar = Scrollbar(logCanvas) #Create Scrollbar widget



    #Set listbox widget for scrolling
    mylist = Listbox(logCanvas,yscrollcommand=scrollbar.set,width=45,height=30,font=("{Lucida Console}",10),bg="#1a1a1a",fg="White",bd=0,highlightthickness=0, relief='ridge')
    mylist.insert(END,"")
    mylist.insert(END, "UPDATE LOG") #Enter firs line in log

    mylist.pack(side=LEFT,fill=BOTH)
    scrollbar.pack(side=RIGHT,fill=Y)
    scrollbar.config(command=mylist.yview,bg="black",activebackground="#313131")



    #Create horizontal divider line
    line = Frame(root,height=2,width=400,bg='#666666')
    line.place(x=370,y=400)



    #Configure File Uploading
    def browseFiles():
        print("Browsing files...")
        #This will be handeled by a future data uploading module

    def uploadFiles():
        print("Files uploading...")
        #This will also be handeled by a future module


    #Setup browse files buttton
    browseButtton = Button(root, width=9,height=1,text="Browse...",bg="#7d7d7d",activebackground='#575656', command=browseFiles)
    browseButtton.place(x=410,y=485)

    outline = Frame(bg='#333333',highlightbackground="#666666", highlightcolor="#666666", highlightthickness=1,bd=0,width=100,height=24)
    outline.place(x=483,y=486)
    fileStatus = Label(outline,text="No File Selected.", bg="#333333",font=("Helvetica", 10))
    fileStatus.pack()

    uploadButtton = Button(root, width=9,height=1,text="Upload",command=uploadFiles)
    uploadButtton.place(x=620,y=485)


    #Automatic Uploads Switch
    img = PhotoImage(file="images/toggle_switch_off.png")

    def autoUpdatesToggle():
        global switchStatus

        if not switchStatus:
            img.config(file="images/toggle_switch_on.png")
            switchStatus = True
        else:
            img.config(file="images/toggle_switch_off.png")
            switchStatus = False

    switch = Button(root, image=img, bd=0,highlightthickness=0, relief='ridge', command=autoUpdatesToggle)
    switch.place(x=585,y=550)



    #Export and Filter Buttons
    exportTXTButton = Button(root,width=5, text=".txt", bg="#333333",fg="#999999",font=("Helvetica", 12),highlightbackground="#666666", relief='ridge',highlightcolor="#666666", highlightthickness=1)
    exportTXTButton.place(x=180,y=607)

    exportCSVButton = Button(root,width=5, text=".csv", bg="#333333",fg="#999999",font=("Helvetica", 12),highlightbackground="#666666", relief='ridge',highlightcolor="#666666", highlightthickness=1)
    exportCSVButton.place(x=250,y=607)

    filterWebsite = Button(root,text="Website\nDestination",activebackground='#333333',bg="#333333",fg="#999999",font=("Helvetica", 10),bd=0,highlightthickness=0, relief='ridge')
    filterWebsite.place(x=125,y=545)

    filterDate = Button(root,text="Date",activebackground='#333333',bg="#333333",fg="#999999",font=("Helvetica", 10),bd=0,highlightthickness=0, relief='ridge')
    filterDate.place(x=225,y=550)

    filterStatus = Button(root,text="Fail /\nSuccess",activebackground='#333333',bg="#333333",fg="#999999",font=("Helvetica", 10),bd=0,highlightthickness=0, relief='ridge')
    filterStatus.place(x=283,y=545)

    vLine = Frame(root,height=40,width=2,bg='#666666')
    vLine.place(x=210,y=543)

    vLine2 = Frame(root,height=40,width=2,bg='#666666')
    vLine2.place(x=270,y=543)



    #Pause button functionality
    img2 = PhotoImage(file='images/pause_button_unpaused.png')

    def pauseUpdates():
        global pauseStatus

        if not pauseStatus:
            img2.config(file='images/pause_button_paused.png')
            pauseStatus = True
            strPauseStatus.set(" Paused")
        else:
            img2.config(file='images/pause_button_unpaused.png')
            pauseStatus = False
            strPauseStatus.set("Running...")
        
    pauseButton = Button(root, image=img2,bd=0,highlightthickness=0, relief='flat',command=pauseUpdates)
    pauseButton.place(x=380, y=103)

        
    #PNG Open scheduler and client website list buttons
    img3 = PhotoImage(file='images/scheduler_button.png')
    updateScheduler = Button(root, image=img3,bd=0,highlightthickness=0, relief='flat')
    updateScheduler.place(x=465,y=230)

    img4 = PhotoImage(file='images/website_list_button.png')
    websiteListtButton = Button(root, image=img4,bd=0,highlightthickness=0, relief='flat')
    websiteListtButton.place(x=446,y=310)



    root.mainloop() #Begin main GUI Loop

    # END OF PAGE ONE SETUP #


#-----------------------------------------------------------------------------------------------

def initialise():
    Setup_GUI_Page1()

initialise()







