'''
SOFTWARE DEVELOPMENT PROJECT
Client Update Utility - Automation_Module

Made By: Will 12SDA
Started on 29/07/2020

This code contains the functionality for automatic/timed
updates of data to the clients. it also handles update events
from scheduled updates

Naming Conventions: Camel Case

This uses:
Data_Management_Module.py
GUI_Module.py
Update_Log_Manager_Module.py

'''

#Import dependencies
from datetime import datetime  
from datetime import timedelta
import time
import smtplib
import threading
from tkinter import messagebox

#Modules I created
import Data_Management_Module as data_manager
import GUI_Module as gui
import Update_Log_Manager_Module as update_log

#Global variables to store status of updates and frequency
isPaused = True
updateFrequency = ""
versionTXT = open("data/current-update-version.txt","r") #Load in the current version
version = float(versionTXT.read())
versionTXT.close()
mostRecentUpdate = ""
userEmail = "" #Store the users email
arrEvents = [] #Array of calendar update event objects


#---------------------------------------------------------------------------------------------------


#Function to calculate exact time of the next update with the given frequency
def calculateNextUpdate():
    data = updateFrequency.split(":") #Get info from inputted update frequency
    newDate = datetime.now() + timedelta(hours=int(data[0]),minutes=int(data[1]),seconds=int(data[2])) #Add the current datetime to the inputted frequency

    #Format date
    m = str(newDate.month)
    d = str(newDate.day)
    h = str(newDate.hour)
    mi = str(newDate.minute)

    #Add zeroes in front of values less than ten so it appears nice on the GUI
    if int(m) < 10:
        m = "0" + m
    if int(d) < 10:
        d = "0" + d
    if int(h) < 10:
        h = "0" + h
    if int(mi) < 10:
        mi = "0" + mi

    #Format it appropriately
    newDate = d + "/" + m + " " + h + ":" + mi
    return newDate #Return the outputted date

#---------------------------------------------------------------------------------------------------


#This is the main loop which accounts for automatic updates
def runUpdateLoop(clients):
    global version
    global mostRecentUpdate
    
    mostRecentUpdate = datetime.now()
    
    data = updateFrequency.split(":") #Get info from inputted update frequency
    delay = timedelta(hours=int(data[0]),minutes=int(data[1]),seconds=int(data[2])).total_seconds() #Set the delay (in seconds) for how frequent the loop should repeat
    
    while isPaused == False: #Only if it isnt paused
        print("Running an auto-update")
        version += 0.1 #This is a new version/update, reflect it here
        
        versionTXT = open("data/current-update-version.txt","r+") #Open up the text file to save version
        versionTXT.write(str(version)[0:3]) #Save the version
        versionTXT.close()
        
        data_manager.distributeUpdates(clients, str(version)[0:3]) #Using 'Data_Management_Module.py', distribute an update to each client
        gui.setMostRecentUpdateText()
        update_log.addToUpdateLog(clients, str(version)[0:3]) #Add the clients to the update log
        time.sleep(delay) #Wait out the delay

#---------------------------------------------------------------------------------------------------

#Class for a scheduled update
class updateEvent:
    def __init__(self, clients, date, emailReminders):
        self.clients = clients #store clients this event applies
        self.date = date #Store the date of this event
        self.emailReminders = emailReminders #Whether or not email reminders are on
        self.wasEmailSent = False #This is to test whether an email has been sent
        self.active = True #if this event is currently active

        gui.createEvent(self.date,len(self.clients))

    #Check if its time for this evnet to be executed
    def checkUpdate(self):
        if datetime.now().month == self.date.month and datetime.now().day == self.date.day and datetime.now().year == self.date.year:
            #It is time for an update
            return True
        else:
            return False

    #Function to run an event loop to check whether an update should be distributed, thus executing this event
    def runEventLoop(self):
        global version, arrEvents

        #Main while loop to check for a scheduled update
        while self.active:
            
            #Check if it is one day prior to the update, if so, send email to remind them, only if email reminders are active
            if datetime.now().month == self.date.month and datetime.now().day == self.date.day - 1:
                if self.emailReminders: #Only if the reminders are turned on
                    if not self.wasEmailSent: #only send it once

                        #loop through the clients and store their names in a string to display on the email
                        clientsNames = ""
                        for client in self.clients:
                            if self.clients.index(client) < len(self.clients) - 1:
                                clientsNames = clientsNames + client.name[3:len(client.name)] + ", "
                            else:
                                clientsNames = clientsNames + client.name[3:len(client.name)]
                                
                        #set the email's content
                        emailContent = "Subject: UPDATE REMINDER:\nThere is a scheduled update TOMMOROW ("+self.date.strftime("%d/%m/%y")+"), to the following clients:\n" + clientsNames + "\n\nThis was an automated email. Please access the client updating utility to cancel/view this update event."

                        #Send an email to the user to remind them of the update
                        mail = smtplib.SMTP('smtp.gmail.com',587) #Access the server
                        mail.ehlo()
                        mail.starttls()
                        mail.login('python.updating.utility@gmail.com','PythonUpdater123') #Log in to gmail
                    
                        mail.sendmail('python.updating.utility@gmail.com',userEmail,emailContent)
                        mail.close()

                        print("Email was sent.") #This should be temporaru
    
                        self.wasEmailSent = True


            
            if self.checkUpdate() == True:
                #It is the day of the update, run an update to the client using the data_management module
                version += 0.1 #This is a new version/update, reflect it here
        
                versionTXT = open("data/current-update-version.txt","r+") #Open up the text file to save version
                versionTXT.write(str(version)[0:3]) #Save the version
                versionTXT.close()
                    
                data_manager.distributeUpdates(self.clients, str(version)[0:3]) #Using 'Data_Management_Module.py', distribute an update to each client
        
                gui.setMostRecentUpdateText()
                update_log.addToUpdateLog(self.clients, str(version)[0:3]) #Add the clients to the update log

                messagebox.showinfo(title="Scheduled Update",message="A scheduled update event was run.")
                
                self.active = False
                
                #Remove from local array
                arrEvents.pop(arrEvents.index(self))

                #Remove from the array in gui module
                day = self.date.day
                for panel in gui.arrDatePanels:
                    if day == gui.arrDatePanels.index(panel)+1:
                        gui.arrDatePanels[gui.arrDatePanels.index(panel)].resetFrame()
                
            time.sleep(3600) #Check once an hour (3600 seconds)

        
#---------------------------------------------------------------------------------------------------
